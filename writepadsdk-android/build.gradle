plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.1"
    ndkVersion = "25.1.8937393"
    sourceSets.main.jniLibs.srcDirs = []

    defaultConfig {
        minSdkVersion 14

        ndk {
            moduleName "libWritePadRecos"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkLibsToJar
    }



    task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
        destinationDir new File(buildDir, 'libs')
        baseName 'ndk-libs'
        extension 'jar'
        from(new File(buildDir, 'libs')) { include '**/*.so' }
        into 'lib/'
    }

    // TODO: to reduce jar size, replace APP_ABI=all with list of CPUs you want to support

    task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir  // '/Android/android-ndk'
        if (android.hasProperty('plugin')) {
            if (android.plugin.hasProperty('sdkHandler')) {
                ndkDir = android.plugin.sdkHandler.getNdkFolder()
            } else {
                ndkDir = android.plugin.ndkDirectory.absolutePath
            }
        } else {
            ndkDir = android.ndkDirectory
        }
        // def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        commandLine "$ndkDir/ndk-build", 'APP_ABI=all', 'APP_OPTIM=release',
                'NDK_PROJECT_PATH=build', 'APP_PLATFORM=android-33',
                'APP_BUILD_SCRIPT=src/main/jni/Android.mk'
    }

    dependencies {
        api fileTree(dir: new File(buildDir, 'libs'), include: ['*.jar'])
    }
}
